name: Deploy Homolog to VM

on:
  push:
    branches: [dev_backend, jnyjhow:dev_backend]
  pull_request:
    branches: [main, WillTbn:main]

jobs:
  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Debug secrets presence (safe)
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -euo pipefail
          echo "--- DEBUG CONTEXT (safe) ---"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_HEAD_REF: ${GITHUB_HEAD_REF:-<empty>}"
          echo "GITHUB_BASE_REF: ${GITHUB_BASE_REF:-<empty>}"
          echo "Actor: ${GITHUB_ACTOR:-<unknown>}"
          # Indicar apenas presença (NÃO imprimir conteúdo das secrets)
          echo "VM_HOST set? ${VM_HOST:+yes}" 
          echo "VM_USER set? ${VM_USER:+yes}" 
          echo "SSH_PRIVATE_KEY set? ${SSH_PRIVATE_KEY:+yes}" 
          echo "SSH_PORT set? ${SSH_PORT:+yes}" 
          echo "--- END DEBUG ---"

      - id: validate_secrets
        name: Validate required deployment secrets
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -euo pipefail
          MISSING=()
          # Use POSIX variable checks on injected env vars to avoid GH expression parsing
          if [ -z "${VM_HOST:-}" ]; then MISSING+=(VM_HOST); fi
          if [ -z "${VM_USER:-}" ]; then MISSING+=(VM_USER); fi
          if [ -z "${SSH_PRIVATE_KEY:-}" ]; then MISSING+=(SSH_PRIVATE_KEY); fi
          PORT_OK=true
          if [ -n "${SSH_PORT:-}" ]; then
            # ensure port is numeric
            if ! echo "${SSH_PORT}" | grep -E '^[0-9]+$' >/dev/null 2>&1; then
              echo "Invalid SSH_PORT: must be numeric" >&2
              PORT_OK=false
            fi
          fi
          if [ ${#MISSING[@]} -ne 0 ] || [ "$PORT_OK" = false ]; then
            echo "Missing or invalid deployment secrets: ${MISSING[*]}" >&2
            echo "This run will skip remote deployment steps. If you expect deploy to run, ensure secrets are set in Settings → Secrets → Actions or run from a branch in this repository (not a fork)." >&2
            echo "secrets_ok=false" >> "$GITHUB_OUTPUT"
          else
            # detect common mistake: user uploaded public key instead of private key
            PKG="${SSH_PRIVATE_KEY//\n/ }"
            if echo "$PKG" | grep -E '^ssh-(rsa|ed25519|dss) ' >/dev/null 2>&1 || echo "$PKG" | grep -i 'BEGIN PUBLIC KEY' >/dev/null 2>&1 || echo "$PKG" | grep -E '\.pub$' >/dev/null 2>&1; then
              echo "SSH_PRIVATE_KEY looks like a public key or not a private key. Make sure you set the private key content (e.g. cat ~/.ssh/id_ed25519) as the secret, not the .pub file." >&2
              echo "secrets_ok=false" >> "$GITHUB_OUTPUT"
            else
              echo "All required deployment secrets present (VM_HOST, VM_USER, SSH_PRIVATE_KEY)"
              echo "secrets_ok=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Pre-clean remote app directory
        if: steps.validate_secrets.outputs.secrets_ok == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Preparing remote path /home/${{ secrets.VM_USER }}/app"
            # Try to remove using sudo (passwordless) if available, fallback to normal rm
            if sudo -n true 2>/dev/null; then
              echo "Removing remote app with sudo"
              sudo rm -rf /home/${{ secrets.VM_USER }}/app || true
            else
              echo "Removing remote app without sudo"
              rm -rf /home/${{ secrets.VM_USER }}/app || true
            fi
            # Ensure parent exists
            mkdir -p /home/${{ secrets.VM_USER }}

      - name: Ensure 'deploy' user exists on remote
        if: steps.validate_secrets.outputs.secrets_ok == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            DEPLOY_USER=deploy
            echo "Checking for user $DEPLOY_USER"
            if id -u "$DEPLOY_USER" >/dev/null 2>&1; then
              echo "User $DEPLOY_USER already exists"
            else
              echo "Creating user $DEPLOY_USER with home /home/$DEPLOY_USER"
              # create the user with a home dir and bash as shell
              if sudo -n true 2>/dev/null; then
                sudo useradd -m -s /bin/bash "$DEPLOY_USER"
              else
                useradd -m -s /bin/bash "$DEPLOY_USER" || true
              fi
            fi

            # Ensure .ssh exists and copy authorized_keys from the connecting user if present
            SOURCE_USER="${{ secrets.VM_USER }}"
            SRC_AUTH_KEYS="/home/${SOURCE_USER}/.ssh/authorized_keys"
            DST_DIR="/home/$DEPLOY_USER/.ssh"
            if [ -f "$SRC_AUTH_KEYS" ]; then
              echo "Copying authorized_keys from $SOURCE_USER to $DEPLOY_USER"
              if sudo -n true 2>/dev/null; then
                sudo mkdir -p "$DST_DIR"
                sudo cp "$SRC_AUTH_KEYS" "$DST_DIR/authorized_keys"
                sudo chown -R $DEPLOY_USER:$DEPLOY_USER "$DST_DIR"
                sudo chmod 700 "$DST_DIR" || true
                sudo chmod 600 "$DST_DIR/authorized_keys" || true
              else
                mkdir -p "$DST_DIR" || true
                cp "$SRC_AUTH_KEYS" "$DST_DIR/authorized_keys" || true
                chown -R $DEPLOY_USER:$DEPLOY_USER "$DST_DIR" || true
                chmod 700 "$DST_DIR" || true
                chmod 600 "$DST_DIR/authorized_keys" || true
              fi
            else
              echo "No authorized_keys found for $SOURCE_USER; ensure deploy can SSH by adding its key manually to /home/deploy/.ssh/authorized_keys"
            fi

            # Add sudoers entry for deploy (NOPASSWD) if not already present
            if sudo -n true 2>/dev/null; then
              SUDOERS_FILE="/etc/sudoers.d/deploy_nopasswd"
              if sudo test -f "$SUDOERS_FILE"; then
                echo "$SUDOERS_FILE already exists"
              else
                echo "Creating sudoers entry for $DEPLOY_USER"
                echo "$DEPLOY_USER ALL=(ALL) NOPASSWD:ALL" | sudo tee "$SUDOERS_FILE" >/dev/null
                sudo chmod 440 "$SUDOERS_FILE"
              fi
            else
              echo "Cannot create sudoers file because sudo requires password or isn't available. Skip creating sudoers entry."
            fi

      - name: Deploy files via SCP action
        if: steps.validate_secrets.outputs.secrets_ok == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./"
          target: "/home/${{ secrets.VM_USER }}/app"

      - name: Remote diagnostics
        if: steps.validate_secrets.outputs.secrets_ok == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo '--- REMOTE DIAGNOSTICS START ---'
            echo "USER: $(whoami)"
            echo "GROUPS: $(id -nG)"
            echo '--- Docker socket ---'
            ls -l /var/run/docker.sock || true
            echo '--- docker version ---'
            docker compose version 2>/dev/null || docker --version 2>/dev/null || echo 'docker not found'
            echo '--- rsync ---'
            which rsync || echo 'rsync not found'
            echo '--- sudo check ---'
            if sudo -n true 2>/dev/null; then echo 'sudo_nopasswd_ok'; else echo 'sudo_requires_password_or_not_installed'; fi
            echo '--- REMOTE DIAGNOSTICS END ---'

      - name: Move uploaded app to deploy home and fix permissions
        if: steps.validate_secrets.outputs.secrets_ok == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            SRC="/home/${{ secrets.VM_USER }}/app"
            DST="/home/deploy/app"
            echo "Moving $SRC to $DST and setting ownership to deploy"
            if [ -d "$SRC" ]; then
              if sudo -n true 2>/dev/null; then
                sudo rm -rf "$DST" || true
                sudo mv "$SRC" "$DST"
                sudo chown -R deploy:deploy "/home/deploy"
                # make the app directory world-readable so the CI user can list files if needed
                sudo chmod -R 755 "$DST" || true
              else
                rm -rf "$DST" || true
                mv "$SRC" "$DST" || true
                chown -R deploy:deploy "/home/deploy" || true
                chmod -R 755 "$DST" || true
              fi
            else
              echo "Source $SRC does not exist; nothing to move"
            fi

      - name: Ensure Docker installed and deploy can use it
        if: steps.validate_secrets.outputs.secrets_ok == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            echo "Checking Docker availability"
            if command -v docker >/dev/null 2>&1; then
              echo "Docker already installed: $(docker --version)"
            else
              echo "Docker not found — attempting to install (apt-based)"
              # Try apt-based install (Debian/Ubuntu)
              if command -v apt-get >/dev/null 2>&1; then
                if sudo -n true 2>/dev/null; then
                  sudo apt-get update -y
                  sudo apt-get install -y ca-certificates curl gnupg lsb-release
                  curl -fsSL https://download.docker.com/linux/$(. /etc/os-release && echo "$ID")/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                  echo \
                    "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/$(. /etc/os-release && echo "$ID") $(lsb_release -cs) stable" \
                    | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                  sudo apt-get update -y
                  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                else
                  # attempt non-sudo install will likely fail, but try fallback to get.docker.com script (needs sudo)
                  echo "No sudo without password: cannot perform apt install. Trying get.docker.com script with sudo prompt (may fail)"
                  curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
                  sh /tmp/get-docker.sh || true
                fi
              else
                echo "Non-apt system: attempting generic get.docker.com script"
                curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
                if sudo -n true 2>/dev/null; then
                  sudo sh /tmp/get-docker.sh || true
                else
                  sh /tmp/get-docker.sh || true
                fi
              fi
            fi

            echo "Ensuring docker group exists and adding deploy"
            if getent group docker >/dev/null 2>&1; then
              echo "docker group exists"
            else
              if sudo -n true 2>/dev/null; then
                sudo groupadd docker || true
              else
                groupadd docker || true
              fi
            fi

            # add deploy to docker group
            if id -nG deploy | grep -qw docker; then
              echo "deploy is already in docker group"
            else
              if sudo -n true 2>/dev/null; then
                sudo usermod -aG docker deploy || true
              else
                usermod -aG docker deploy || true
              fi
            fi

            # ensure socket permissions
            if [ -S /var/run/docker.sock ]; then
              echo "docker socket present: $(ls -l /var/run/docker.sock)"
              if sudo -n true 2>/dev/null; then
                sudo chown root:docker /var/run/docker.sock || true
                sudo chmod 660 /var/run/docker.sock || true
              else
                chown root:docker /var/run/docker.sock || true
                chmod 660 /var/run/docker.sock || true
              fi
            fi

            # restart docker service to ensure new installation and group changes take effect
            echo "Restarting docker service to apply changes"
            if sudo -n true 2>/dev/null; then
              sudo systemctl daemon-reload || true
              sudo systemctl restart docker || sudo service docker restart || true
              sudo systemctl enable --now docker || true
            else
              echo "No passwordless sudo: attempting service restart (may fail)"
              service docker restart || true
            fi

            # wait for docker to become responsive (best-effort)
            echo "Waiting for docker to be responsive"
            for i in 1 2 3 4 5 6 7 8 9 10; do
              if sudo -n true 2>/dev/null; then
                sudo docker info >/dev/null 2>&1 && break || true
              else
                docker info >/dev/null 2>&1 && break || true
              fi
              sleep 2
            done

            echo "Testing docker access as deploy"
            # try running docker ps as deploy. If it fails due to group membership, note that a relogin is required.
            if sudo -n true 2>/dev/null; then
              sudo -u deploy docker ps || {
                echo "docker ps as deploy failed — may need relogin or a system restart to apply group membership";
              }
            else
              su - deploy -c 'docker ps' || echo "docker ps as deploy failed — may need relogin or a system restart to apply group membership"
            fi

      - name: Fix docker socket perms and ensure deploy can run docker (CI-applied)
        if: steps.validate_secrets.outputs.secrets_ok == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            echo "Ensuring deploy is in docker group and socket perms are correct (CI-applied)"
            # Ensure deploy is in docker group
            if id -nG deploy | grep -qw docker; then
              echo "deploy is already in docker group"
            else
              if sudo -n true 2>/dev/null; then
                sudo usermod -aG docker deploy || true
              else
                usermod -aG docker deploy || true
              fi
            fi

            # Fix socket ownership/perms
            if [ -S /var/run/docker.sock ]; then
              echo "Fixing docker socket ownership and permissions"
              if sudo -n true 2>/dev/null; then
                sudo chown root:docker /var/run/docker.sock || true
                sudo chmod 660 /var/run/docker.sock || true
              else
                chown root:docker /var/run/docker.sock || true
                chmod 660 /var/run/docker.sock || true
              fi
            else
              echo "No docker socket found to adjust"
            fi

            # Restart docker
            echo "Attempting to restart docker to apply group membership"
            if sudo -n true 2>/dev/null; then
              sudo systemctl restart docker || sudo service docker restart || true
            else
              service docker restart || true
            fi

            # Try to run docker as deploy using sg/newgrp to apply new group immediately for this command
            echo "Testing docker ps as deploy using sg/newgrp"
            if command -v sg >/dev/null 2>&1; then
              sg docker -c 'docker ps' || echo "sg docker failed; docker ps may still require relogin"
            else
              newgrp docker -c 'docker ps' || su - deploy -c 'docker ps' || echo "docker ps as deploy failed; a relogin or VM restart may be required"
            fi

      - name: Grant docker permissions to deploy (CI)
        if: steps.validate_secrets.outputs.secrets_ok == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            echo "Granting docker permissions to user 'deploy'"
            # Ensure docker group exists and add deploy to it
            if sudo -n true 2>/dev/null; then
              sudo groupadd docker || true
              sudo usermod -aG docker deploy || true

              # Determine docker binaries
              DOCKER_BIN=$(command -v docker || echo /usr/bin/docker)
              DOCKER_COMPOSE_BIN=$(command -v docker-compose || echo /usr/bin/docker-compose)

              # Create a restricted sudoers file allowing deploy to run docker/docker-compose without password
              SUDOERS_FILE="/etc/sudoers.d/deploy_docker"
              if sudo test -f "$SUDOERS_FILE"; then
                echo "$SUDOERS_FILE already exists"
              else
                echo "Creating sudoers entry $SUDOERS_FILE"
                echo "deploy ALL=(ALL) NOPASSWD: $DOCKER_BIN, $DOCKER_COMPOSE_BIN" | sudo tee "$SUDOERS_FILE" >/dev/null
                sudo chmod 440 "$SUDOERS_FILE" || true
              fi

              # Try to setfacl on docker socket if available
              if command -v setfacl >/dev/null 2>&1; then
                sudo setfacl -m u:deploy:rw /var/run/docker.sock || true
              fi

              # Restart docker to apply group membership/socket changes
              sudo systemctl restart docker || sudo service docker restart || true
            else
              echo "No passwordless sudo: attempting best-effort non-sudo changes (may not persist)"
              groupadd docker || true
              usermod -aG docker deploy || true
              if command -v setfacl >/dev/null 2>&1; then
                setfacl -m u:deploy:rw /var/run/docker.sock || true
              fi
              echo "Skipping sudoers file creation because sudo is not available without prompt"
            fi
            echo "Grant step completed"

      - name: Ensure /home/deploy/app ownership and perms (CI)
        if: steps.validate_secrets.outputs.secrets_ok == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            APP_DIR="/home/deploy/app"
            echo "Ensuring ownership and perms for $APP_DIR"
            if [ -d "$APP_DIR" ]; then
              if sudo -n true 2>/dev/null; then
                sudo chown -R deploy:deploy "$APP_DIR" || true
                sudo chmod -R 755 "$APP_DIR" || true
                sudo ls -la "$APP_DIR" || true
              else
                chown -R deploy:deploy "$APP_DIR" || true
                chmod -R 755 "$APP_DIR" || true
                su - deploy -c "ls -la '$APP_DIR'" || ls -la "$APP_DIR" || true
              fi
            else
              echo "$APP_DIR does not exist"
            fi
