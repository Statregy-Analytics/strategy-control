name: Deploy Homolog to VM

on:
  push:
    branches: [dev_backend, jnyjhow:dev_backend]
  pull_request:
    branches: [main, WillTbn:main]

jobs:
  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Validate SSH secrets
        run: |
          echo "Checking required SSH secrets..."
          missing=0
          if [ -z "${{ secrets.ftp_host }}" ]; then echo "ERROR: ftp_host is not set"; missing=1; fi
          if [ -z "${{ secrets.ftp_user }}" ]; then echo "ERROR: ftp_user is not set"; missing=1; fi
          if [ -z "${{ secrets.ftp_password }}" ] && [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "ERROR: either ftp_password or SSH_PRIVATE_KEY must be set"; missing=1
          fi
          if [ "$missing" -ne 0 ]; then exit 1; fi

      - name: Pre-clean remote app directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ftp_host }}
          username: ${{ secrets.ftp_user }}
          password: ${{ secrets.ftp_password }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Preparing remote path /home/${{ secrets.ftp_user }}/app"
            # Try to remove using sudo (passwordless) if available, fallback to normal rm
            if sudo -n true 2>/dev/null; then
              echo "Removing remote app with sudo"
              sudo rm -rf /home/${{ secrets.ftp_user }}/app || true
            else
              echo "Removing remote app without sudo"
              rm -rf /home/${{ secrets.ftp_user }}/app || true
            fi
            # Ensure parent exists
            mkdir -p /home/${{ secrets.ftp_user }}

      - name: Deploy files via SCP action
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ftp_host }}
          username: ${{ secrets.ftp_user }}
          password: ${{ secrets.ftp_password }}
          port: ${{ secrets.SSH_PORT }}
          source: "./"
          target: "/home/${{ secrets.ftp_user }}/app"

      - name: Remote diagnostics
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ftp_host }}
          username: ${{ secrets.ftp_user }}
          password: ${{ secrets.ftp_password }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo '--- REMOTE DIAGNOSTICS START ---'
            echo "USER: $(whoami)"
            echo "GROUPS: $(id -nG)"
            echo '--- Docker socket ---'
            ls -l /var/run/docker.sock || true
            echo '--- docker version ---'
            docker compose version 2>/dev/null || docker --version 2>/dev/null || echo 'docker not found'
            echo '--- rsync ---'
            which rsync || echo 'rsync not found'
            echo '--- sudo check ---'
            if sudo -n true 2>/dev/null; then echo 'sudo_nopasswd_ok'; else echo 'sudo_requires_password_or_not_installed'; fi
            echo '--- REMOTE DIAGNOSTICS END ---'

# Note: prefer using SSH_PRIVATE_KEY secret instead of ftp_password for better security.
# Example: set a secret named SSH_PRIVATE_KEY (contents of your private key) and configure
# the action with 'key: ${{ secrets.SSH_PRIVATE_KEY }}' instead of 'password'.
